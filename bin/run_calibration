#!/usr/bin/env python

import os
import json
import subprocess
import argparse
import re
import shutil

def parse_args():
    # see https://docs.python.org/2/library/argparse.html for reference
    parser = argparse.ArgumentParser(
            description='Run calibration on collected data')
    parser.add_argument('--cores',
            help='Number of simultaneous instances to run if necessary',
            type=int,
            default=4)
    parser.add_argument('-s', '--settings',
            help='Calibration Settings Json from blank or generate',
            type=str)
    parser.add_argument('-b', '--blank',
            help='Generate a blank json config',
            type=str)
    parser.add_argument('-g', '--generate',
            help='Auto generate a json config from the base name given',
            default=None,
            type=str,
            action='store',
            const=True,
            nargs='?')
    parser.add_argument('--simulate',
            help='Just print out the commands, but do not run them',
            action='store_true')
    parser.add_argument('-d', '--decode',
            help='Decode all of the data files',
            action='store_true')
    parser.add_argument('-cal', '--calibrate',
            help='Decode all of the data files',
            action='store_true')
    parser.add_argument('-ad', '--assume_decoded',
            help='Assume the files have been decoded for calibration',
            action='store_true')
    parser.add_argument('-a', '--all',
            help='Run all of the calibrations',
            action='store_true')
    parser.add_argument('-p', '--pedestals',
            help='Calculate pedestals from "ped_filelist" into "ped_file"',
            action='store_true')
    parser.add_argument('-u', '--uv',
            help='Calculate uv from "filelist" into "uv_file"',
            action='store_true')
    parser.add_argument('-app', '--apd_photopeaks',
            help='Calculate the APD photopeaks from "filelist" ' +
                 'into "pp_file" and generate energy histograms in ' +
                 '"pp_root_file"',
            action='store_true')
    parser.add_argument('-fillf', '--fill_floods',
            help='Fill floods from "filelist" into "flood_root_file"',
            action='store_true')
    parser.add_argument('-fitf', '--fit_floods',
            help='Fit floods in "flood_root_file" and write the crystal ' +
                  'positions to "loc_file" and place the root graphs in ' +
                  '"graphs_root_file"',
            action='store_true')
    parser.add_argument('-cpp', '--crystal_photopeaks',
            help='Calculate the crystal photopeaks from "filelist" ' +
                 'and generate "cal_file" and generate energy histograms in ' +
                 '"crystal_energy_root_file"',
            action='store_true')

    return parser

def generate_blank_config(filename):
    blank_config = dict()
    blank_config['config_file'] = ''
    blank_config['ped_filelist'] = ''
    blank_config['ped_file'] = ''
    blank_config['filelist'] = ''
    blank_config['dec_filelist'] = ''
    blank_config['cal_filelist'] = ''
    blank_config['uv_file'] = ''
    blank_config['pp_file'] = ''
    blank_config['pp_root_file'] = ''
    blank_config['flood_root_file'] = ''
    blank_config['loc_file'] = ''
    blank_config['graphs_root_file'] = ''
    blank_config['cal_file'] = ''
    blank_config['crystal_energy_root_file'] = ''
    with open(filename, 'w') as json_file:
        json.dump(blank_config,
                  json_file,
                  ensure_ascii=True,
                  sort_keys=True,
                  indent=4,
                  separators=(',', ': '))
        json_file.write('\n')
    quit()

def auto_generate_config(base_name):
    files = os.listdir('.')

    # Find any config file that would have been created by breastdaq
    config_files_rx = re.compile('^DAQ_Config_[0-9]{10}.json$')
    config_files = sorted(
            [l for l in files for m in [config_files_rx.search(l)] if m])

    # find the daq files
    daq_files_rx = re.compile('^DAQ_Data_[0-9]{10}_[L,R][0-9]_[0-9]{1,3}.dat$')
    daq_files = sorted(
            [l for l in files for m in [daq_files_rx.search(l)] if m])


    dec_files = [s.replace('.dat','.dat.dec') for s in daq_files]
    cal_files = [s.replace('.dat','.dat.cal') for s in daq_files]

    # find all the pedestal files
    ped_files_rx = re.compile('^PED_Data_[0-9]{10}_[L,R][0-9]_[0-9]{1,3}.dat$')
    ped_files = sorted(
            [l for l in files for m in [ped_files_rx.search(l)] if m])

    if len(daq_files) == 0 and len(ped_files) == 0:
        print 'No daq or ped files found. Exiting'
        quit(1)

    # Look in all of the files found for something matching the beginning of
    # what we would expect for a data file and return the first match
    beginning_rx = re.compile('^DAQ_Data_[0-9]{10}')
    data_base_files = [m.group(0) for l in files for m in [beginning_rx.search(l)] if m]
    beginning_rx = re.compile('^PED_Data_[0-9]{10}')
    ped_base_files = [m.group(0) for l in files for m in [beginning_rx.search(l)] if m]

    # Use this to create a base name in the event that no config file is found
    # with the 'DAQ_Config_' type name.
    if len(data_base_files) > 0:
        non_standard_base_name = data_base_files[0].replace('_Data_', '_Calib_')
    elif len(ped_base_files) > 0:
        non_standard_base_name = ped_base_files[0].replace('_Data_', '_Calib_')
    else:
        print 'Something weird happened.  Should have exited earlier'
        quit(1)

    # start with the default file as the system default file and change it if
    # an appropriate file in the directory is found
    system_config_file = '/home/miil/FINDATA/nfo/breast_daq_config.json'
    if len(config_files) == 0:
        # We didn't find a config file with the standard breastdaq convention,
        # so let's see if it was copied into the directory
        config_files_rx = re.compile('^breast_daq_config.json$')
        config_files = [l for l in files for m in [config_files_rx.search(l)] if m]
        if len(config_files) == 1:
            config_file = config_file = config_files[0]
        else:
            print 'No BreastDAQ config file found.'
            config_file = non_standard_base_name.replace('_Calib_', '_Config_') + '.json'
            print 'Copying system default config to current directory as: %s' % config_file
            shutil.copy(system_config_file, config_file)

        # Either way, we now have a non-standard config file that we can't
        # simply replace the strings on to get a base name, so we set it to the
        # non-standard one, if it has not been set already.
        if type(base_name) is not str:
            base_name = non_standard_base_name
    elif len(config_files) > 1:
        print 'Found Multiple BreastDAQ config files'
        for ii in range(len(config_files)):
            print '    %d: %s' % (ii, config_files[ii])
        try:
            config_file_idx = int(raw_input('Enter number of config to use: '))
        except ValueError:
            print 'Invalid value, selecting the first file'
            config_file_idx = 0

        if (config_file_idx >= 0) and (config_file_idx < len(config_files)):
            config_file = config_files[config_file_idx]
        else:
            print 'Invalid input of config file, picking the first one'
            config_file = config_files[0]
    else:
        # Found only one breast daq formatted file, pick it and continue
        config_file = config_files[0]

    if type(base_name) is not str:
        base_name = config_file.replace('_Config_', '_Calib_').replace('.json', '')

    new_config = dict()
    new_config['config_file'] = config_file
    new_config['ped_filelist'] = base_name + '.filelist.ped.txt'
    new_config['ped_file'] = base_name + '.ped'
    new_config['filelist'] = base_name + '.filelist.daq.txt'
    new_config['dec_filelist'] = base_name + '.filelist.dec.txt'
    new_config['cal_filelist'] = base_name + '.filelist.cal.txt'
    new_config['uv_file'] = base_name + '.uv'
    new_config['pp_file'] = base_name + '.pp'
    new_config['pp_root_file'] = base_name + '.pp.root'
    new_config['flood_root_file'] = base_name + '.floods.root'
    new_config['loc_file'] = base_name + '.loc'
    new_config['graphs_root_file'] = base_name + '.graphs.root'
    new_config['cal_file'] = base_name + '.cal'
    new_config['crystal_energy_root_file'] = base_name + '.xpp.root'


    cal_json_name = base_name + '.json'

    with open(cal_json_name, 'w') as json_file:
        json.dump(new_config,
                  json_file,
                  ensure_ascii=True,
                  sort_keys=True,
                  indent=4,
                  separators=(',', ': '))
        json_file.write('\n')

    with open(new_config['ped_filelist'], 'w') as f:
        f.write('\n'.join(ped_files) + '\n')
    with open(new_config['filelist'], 'w') as f:
        f.write('\n'.join(daq_files) + '\n')
    with open(new_config['dec_filelist'], 'w') as f:
        f.write('\n'.join(dec_files) + '\n')
    with open(new_config['cal_filelist'], 'w') as f:
        f.write('\n'.join(cal_files) + '\n')

    print 'Check if the generated config (%s) and filelists look correct' % \
            cal_json_name
    print 'Then execute "run_calibration -s %s [-a -ff ...]"' % cal_json_name
    quit()

parser = parse_args()
args = parser.parse_args()


# Check first if the user wanted to generate a template to work from
if args.blank:
    generate_blank_config(args.blank)
# Or if we should try and generate one from the current directory
if args.generate:
    auto_generate_config(args.generate)


# Then make sure they had specified a json config file
if args.settings is None:
    parser.print_help()
    quit()

# And then load that config
with open(args.settings, 'r') as json_file:
    cal_info = json.load(json_file)


if args.decode:
    popens = []
    with open(cal_info['filelist']) as f:
        daq_files = f.read().splitlines()
    for f in daq_files:
        decode_cmd = 'decode -c %s -p %s -f %s' % (
                cal_info['config_file'],
                cal_info['ped_file'], f)
        print decode_cmd
        if not args.simulate:
            popens.append(subprocess.Popen([decode_cmd], shell=True))

        # If we have args.cores instances running, then wait until the first one
        # gets done before we continue
        if len(popens) >= args.cores:
            popens[0].wait()
            popens.pop(0)

    # Wait for the processes to finish up
    for popen in popens:
        popen.wait()


if args.calibrate:
    popens = []
    with open(cal_info['filelist']) as f:
        daq_files = f.read().splitlines()
    for f in daq_files:
        cal_cmd = 'decode -c %s -p %s -cal %s -uv %s -f %s' % (
                cal_info['config_file'],
                cal_info['ped_file'],
                cal_info['cal_file'],
                cal_info['uv_file'], f)
        print cal_cmd
        if not args.simulate:
            popens.append(subprocess.Popen([cal_cmd], shell=True))

        # If we have args.cores instances running, then wait until the first one
        # gets done before we continue
        if len(popens) >= args.cores:
            popens[0].wait()
            popens.pop(0)

    # Wait for the processes to finish up
    for popen in popens:
        popen.wait()

if args.all:
    args.pedestals = True
    args.uv = True
    args.apd_photopeaks = True
    args.fill_floods = True
    args.fit_floods = True
    args.crystal_photopeaks = True

if args.pedestals:
    ped_cmd = 'pedestals -v -c %s -l %s -o %s' % (
            cal_info['config_file'],
            cal_info['ped_filelist'],
            cal_info['ped_file'])
    print ped_cmd
    if not args.simulate:
        ped_status = subprocess.call([ped_cmd], shell=True)
        if ped_status != 0:
            print 'Failed to run: %s' % (ped_cmd,)
            quit(ped_status)

if args.uv:
    filelist = cal_info['filelist']
    if args.assume_decoded:
        filelist = cal_info['dec_filelist']
    uv_cmd = 'calc_uv -v -c %s -p %s -l %s -o %s' % (
            cal_info['config_file'],
            cal_info['ped_file'],
            filelist,
            cal_info['uv_file'])
    if args.assume_decoded:
        uv_cmd += ' -ad'
    print uv_cmd
    if not args.simulate:
        uv_status = subprocess.call([uv_cmd], shell=True)
        if uv_status != 0:
            print 'Failed to run: %s' % (uv_cmd,)
            quit(uv_status)

if args.apd_photopeaks:
    filelist = cal_info['filelist']
    if args.assume_decoded:
        filelist = cal_info['dec_filelist']
    apd_cmd = 'get_apd_photopeaks -v -c %s -p %s -l %s -o %s -ro %s' % (
            cal_info['config_file'],
            cal_info['ped_file'],
            filelist,
            cal_info['pp_file'],
            cal_info['pp_root_file'])
    if args.assume_decoded:
        apd_cmd += ' -ad'
    print apd_cmd
    if not args.simulate:
        apd_status = subprocess.call([apd_cmd], shell=True)
        if apd_status != 0:
            print 'Failed to run: %s' % (apd_cmd,)
            quit(apd_status)

if args.fill_floods:
    filelist = cal_info['filelist']
    if args.assume_decoded:
        filelist = cal_info['dec_filelist']
    fill_cmd = 'fill_floods -v -c %s -p %s -l %s -pp %s -o %s' % (
            cal_info['config_file'],
            cal_info['ped_file'],
            filelist,
            cal_info['pp_file'],
            cal_info['flood_root_file'])
    if args.assume_decoded:
        fill_cmd += ' -ad'
    print fill_cmd
    if not args.simulate:
        fill_status = subprocess.call([fill_cmd], shell=True)
        if fill_status != 0:
            print 'Failed to run: %s' % (fill_cmd,)
            quit(fill_status)

if args.fit_floods:
    fit_cmd = 'fit_floods -v -c %s -f %s -o %s -ro %s' % (
            cal_info['config_file'],
            cal_info['flood_root_file'],
            cal_info['loc_file'],
            cal_info['graphs_root_file'])
    print fit_cmd
    if not args.simulate:
        fit_status = subprocess.call([fit_cmd], shell=True)
        if fit_status != 0:
            print 'Failed to run: %s' % (fit_cmd,)
            quit(fit_status)

if args.crystal_photopeaks:
    filelist = cal_info['filelist']
    if args.assume_decoded:
        filelist = cal_info['dec_filelist']
    cry_cmd = 'get_crystal_photopeaks -v -c %s -p %s -pp %s -x %s -l %s -o %s -ro %s' % (
            cal_info['config_file'],
            cal_info['ped_file'],
            cal_info['pp_file'],
            cal_info['loc_file'],
            filelist,
            cal_info['cal_file'],
            cal_info['crystal_energy_root_file'])
    if args.assume_decoded:
        cry_cmd += ' -ad'
    print cry_cmd
    if not args.simulate:
        cry_status = subprocess.call([cry_cmd], shell=True)
        if cry_status != 0:
            print 'Failed to run: %s' % (cry_cmd,)
            quit(cry_status)
