#!/usr/bin/env python

import numpy as np
import argparse
import miil
import os
import json

def parse_args():
    parser = argparse.ArgumentParser(
            description='Output Cuda File')
    parser.add_argument('-s', '--settings',
            help='Load a settings json file to start with',
            type=str)
    parser.add_argument('-f', '--filename',
            help='Coincidence filelist to load',
            type=str)
    parser.add_argument('-o', '--output',
            help='Where to save the listmode file',
            type=str)
    parser.add_argument('-t', '--time_cal',
            help='Time Calibration to Load',
            type=str)
    parser.add_argument('-c', '--config',
            help='System Config to load',
            type=str)
    parser.add_argument('-w', '--window',
            help='Time window to use on the events',
            type=float)
    parser.add_argument('-p', '--panel_sep',
            help='Panel Separation to use for the list mode data',
            type=float,
            default=64.262)
    parser.add_argument('-m', '--max_time',
            help='The maximum amount of data to write out in minutes',
            type=float)
    parser.add_argument('-n', '--no_events',
            help=('The maximum number of events to write out.'
                  '  Overrules max_time if necessary'),
            type=int)
    return parser


parser = parse_args()
args = parser.parse_args()

settings = dict()
if args.settings:
    with open(args.settings) as json_file:
        settings = json.load(json_file)

if args.filename:
    settings['coinc_filelist'] = args.filename

if args.time_cal:
    settings['time_edep_cal_file'] = args.time_cal

if args.config:
    settings['config_file'] = args.config

if args.window:
    settings['window'] = args.window

if 'window' not in settings:
    settings['window'] = 40.0
print 'Using time window of %0.1f' % settings['window']

if args.panel_sep:
    settings['panel_sep'] = args.panel_sep

if 'panel_sep' not in settings:
    settings['panel_sep'] = 64.262
print 'Using panel separation of %0.3f' % settings['panel_sep']

if args.max_time:
    settings['max_time'] = args.max_time

if args.no_events:
    settings['no_events'] = args.no_events

if 'coinc_filelist' not in settings:
    parser.print_help()
    quit()

if 'cuda_file' not in settings:
    settings['cuda_file'] = \
            settings['coinc_filelist'].replace('filelist.coinc.txt', 'cuda')

if args.output:
    settings['cuda_file'] = args.output

if args.settings:
    cuda_filename = args.settings.replace('tcal.json', 'cuda.json').replace('coinc.json', 'cuda.json')
    with open(cuda_filename, 'w') as json_file:
        json.dump(settings,
                  json_file,
                  ensure_ascii=True,
                  sort_keys=True,
                  indent=4,
                  separators=(',', ': '))
        json_file.write('\n')


data = miil.load_coinc_filelist(settings['coinc_filelist'])
tcal = miil.load_time_calibration(settings['time_edep_cal_file'])

cal_data = miil.tcal_coinc_events(data, tcal)
windowed_data = cal_data[np.abs(cal_data['dtf']) < settings['window']]


# assume a 12MHz clock for the coarse timestamp, unless we can verify the value
# listed in the breastdaq json config file.
ct_frequency = 12.0e6
if 'config_file' in settings:
    with open(settings['config_file'], 'r') as json_file:
        breast_daq_config = json.load(json_file)
        if 'ct_frequency' in breast_daq_config:
            ct_frequency = breast_daq_config['ct_frequency']


if 'max_time' in settings:
    max_time_ct_ticks = 60.0 * settings['max_time'] * ct_frequency
    last_ct_value = windowed_data['ct0'][0] + max_time_ct_ticks
    windowed_data = windowed_data[windowed_data['ct0'] < last_ct_value]

if 'no_events' in settings:
    windowed_data = windowed_data[0:np.min((settings['no_events'],
                                            len(windowed_data)))]

writing_no_events = len(windowed_data)
writing_no_minutes = (windowed_data['ct0'][-1] - windowed_data['ct0'][0]) / \
                     ct_frequency / 60.0

print 'Writing %d events from %0.2f minutes' % (
        writing_no_events, writing_no_minutes)

lm_data = miil.create_listmode_data(windowed_data,
                                    panel_sep=settings['panel_sep'])

miil.save_binary(lm_data, settings['cuda_file'])
